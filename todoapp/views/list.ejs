<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css"
          integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">

    <title>To-do List</title>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Todo App</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
            <li class="nav-item active">
                <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Write</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Temporary</a>
            </li>
        </ul>
    </div>
</nav>
<!--
서버에서 쉽게 할일 리스트를 가져오고 싶으면 EJS 라이브러리를 쓰자!
*EJS: EJS 는 서버 데이터를 HTML 에 쉽게쉽게 박아넣을 수 있게 도와주는
      일종의 HTML 렌더링 엔진 혹은 template engine(전처리 엔진)이라고 부른다!
      이것 말고 PUG 도 있지만 EJS 가 쓰기에 더 쉽다고함!
      EJS simply stands for Embedded Javascript.
      It is a simple templating language/engine that lets its user generate HTML with plain javascript.
      EJS is mostly useful whenever you have to output HTML with a lot of javascript.
      *** EJS 파일은 HTML 과 똑같은데 HTML 태그 안에 내용물로 서버로 보냈던 데이터를 집어넣을 수 있다! ***
        Ex) <h4>To-do: < %= 변수이름 % ></h4>   -> 이렇게 하면 HTML 글자로 렌더링됨
      만약 Vue, React, Angular 를 안다면, html 을 효과적으로 데이터 바인딩 가능!
-->
<h4 class="ml-2 my-3">To-do List from Server</h4>
    <ul class="list-group">
        <% for(let i = 0; i < posts.length; i++) { %>
            <li class="list-group-item">
                <p>No. <%= posts[i]._id %></p>
                <h4>To-do List: <%= posts[i].todo %></h4>
                <p>Due Date: <%= posts[i].date %></p>
                <button class="delete" data-id="<%= posts[i]._id %>">Delete</button>
            </li>
        <% } %>
    </ul>
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>
<script>
    // 🟫 1.ajax 로 delete 기능 구현하는 방법! (버튼을 클릭하면 그에 해당하는 {_id: numOfPost} 를 가져온다.
    $('.delete').click(function (e) {
        let numOfPost = e.target.dataset.id;
        let 지금누른거 = $(this);   // *this: 현재 클릭 이벤트가 동작하는 곳!(우리가 방금 누른 delete 버튼의 뜻과 매우 유사!)
                                  // *e.target: 지금 클릭한것
        $.ajax({    // ← ajax 요청을 할 수 있는 함수
            method: 'DELETE',
            url: '/delete',     // ← 서버에 새로고침없이 /delete 경로로 DELETE 요청을 해주세요
            data: {_id: numOfPost}      // 요청과 함께 보낼 데이터(나중에 🟫2.에서 'server.js' 에서 'req.body' 로 들어오는 정보!)
        }).done(function (result) { // 위의 AJAX 요청이 성공했을때 이 코드를 실행해주세요~
            // ↓ 위의 AJAX 코드 성공시 아래 코드 실행해주세요
            //   ('/delete' 로 연결된 서버에서 응답을 해줘야 done 안에 있는 콜백함수가 실행됨!!)
            //   방법1) 페이지를 강제로 새로 고침해주세요    -> location.reload(); [jQuery 함수?]
            //         -> 이 방법을 쓰면 ajax 를 쓰는 이유가 없음! (ajax 는 새로고침 없이 스무스하게 글을 발행, 삭제, 수정시켜주기 때문!)
            //   방법2) 삭제 버튼을 누른 <li> 요소를 제거해주세요 / 안보이게
            console.log('성공띠'); // ← 브라우저의 콘솔창
            지금누른거.parent('li').fadeOut(); // 지금 누른거(버튼)의 부모 요소 중에 li 태그를 찾아서 fadeOut() 처리를 해줘!
            // ↑ .done 안의 코드가 제대로 동작하기 위해서 'server.js' 에서 /delete 경로로 DELETE 요청이 성공했을때, 즉, 여기선 deleteOne 함수가 성공하면 성공했다는 메세지를 잘 보내줘야함!
            //    Ex) res.status(200).send({message: 'Successful!'});   -> 200: OK(요청 성공!)  400: Bad Request(고객 잘못으로 요청실패)
        }).fail(function (xhr, textStatus, errorThrown) {
            // 요청 실패시 실행할 코드는 여기!
            // 즉, server.js 에서 /delete 경로로 DELETE 요청이 실패했을때 아래 코드 실행!
            //   Ex) res.status(400).send({message: 'Failed'});  에서와 같이 Response Code 가 실패(400)여야 한다!
            console.log(xhr, textStatus, errorThrown);
            // {readyState: 4, getResponseHeader: ƒ, getAllResponseHeaders: ƒ, setRequestHeader: ƒ, overrideMimeType: ƒ, …}
            // *textStatus: Response Code(응답코드)
            // *errorThrown: 에러메세지 반환
        });
    });

    /* jQuery 의 도움을 받아서 AJAX 개발! */
    /*      AJAX 를 생 JS로 짜려고 하면 코드가 너무 길어짐! */

</script>
    <!-- 🟩 Delete 요청하는 법 -->
        <!-- 1) method-override 라이브러리 이용 -->
        <!--    ↑ node.js 환경에서 서버만들 때 쓸수 있는 라이브러리 -->
        <!--      이 라이브러리를 쓰면 버튼을 눌렀을때 delete 요청이 가능해짐! -->
        <!-- 2) JavaScript AJAX 를 이용 -->
        <!--    ↑ 서버만들때 꼭 필요함 (언젠가는 쓰게 되있음) -->
        <!--      간단한 서버든 복잡한 서버든 꼭 다뤄야할 내용! -->
        <!-- 3) 그냥 POST 요청을 날려서 DELETE 작업을 수행한다 -->
    <!-- 🟩 AJAX 란? -->
        <!-- 프론트엔드에서 JS 를 이용해 서버에 여러가지 요청을 할 수 있는 문법 같은 것입니다. -->
        <!-- 서버랑 통신할 수 있게 도와주는 JS 문법! -->
        <!-- 즉, JS 가 서버랑 요청을 주고 받을 때 쓰는 문법!-->
        <!--    Ex) GET, POST 요청 -->
        <!-- *장점: 새로고침 없이도 서버와 통신 가능! -->



<!-- Optional JavaScript; choose one of the two! -->

<!-- Option 1: jQuery and Bootstrap Bundle (includes Popper) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct"
        crossorigin="anonymous"></script>

<!-- Option 2: Separate Popper and Bootstrap JS -->
<!--
<script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js" integrity="sha384-+sLIOodYLS7CIrQpBjl+C7nPvqq+FbNUBDunl/OZv93DB7Ln/533i8e/mZXLi/P+" crossorigin="anonymous"></script>
-->
</body>
</html>